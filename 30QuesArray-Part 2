#include <iostream>
#include<algorithm>

using namespace std;

// Ques:-To Find the most occuring element in an array of integers
void mostOccElement(int arr[], int size)
{
	int max_count = 0;
	cout << " \nMost Occuring Element is : ";
	for (int i = 0; i < size; i++)
	{
		int count = 1;
		for (int j = i + 1; j < size; j++)
			if (arr[i] == arr[j])
				count++;
		if (count > max_count)
			max_count = count;
	}

	for (int i = 0; i < size; i++)
	{
		int count = 1;
		for (int j = i + 1; j < size; j++)
			if (arr[i] == arr[j])
				count++;
		if (count == max_count)
			cout << arr[i] << endl;

	}

	cout << max_count;//how many times its occur

}
	
//Ques-To Sort a given unsorted array in WAVE FORM:
void swapElements(int *a, int *b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
void arrayWaveForm(int arr[], int size)
{
	sort(arr, arr + size);//array sorted
	for (int i = 0; i < size - 1; i +=2)
		swapElements(&arr[i], &arr[i + 1]);
	cout << "\n Sorted in Wave Form Array : ";
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << ",";
	}
	
}
//Ques-To find the smallest missing element in a sorted array
int smallestMissingElement(int arr1[],int start,int end)
{
	if (start > end)
		return end + 1;
	if (start != arr1[start])
		return start;
	int mid = (start + end) / 2;
	if (arr1[mid] == mid)
		return smallestMissingElement(arr1, mid + 1, end);

	return smallestMissingElement(arr1, start, mid);
}
// Ques-to update every array element by multiplication of
//     next and previous values of a given array of integers
void replaceElements(int arr1[], int size1)
{
	if (size1 <= 1)
		return;
	int pre_element = arr1[0];
	arr1[0] = arr1[0] * arr1[1];
	for (int i = 1; i < size1-1; i++)
	{
		int curr_element = arr1[i];
		arr1[i] = pre_element * arr1[i + 1];
		pre_element = curr_element;
	}
	arr1[size1 - 1] = pre_element * arr1[size1 - 1];
	cout << "\n\n\nThe New Array Is After Replacing:";
	for (int i = 0; i < size1; i++)
	{
		cout << arr1[i] << ",";
	}
}
//to rearrange the elements of a given array of integers
// in zig-zag fashion way--a < b > c < d > e < f....
void zigZag(int arr[], int size)
{
	bool ans = true;
	for (int i = 0; i <= size - 2; i++)
	{
		if (ans)
		{
			if (arr[i] > arr[i + 1])
				swap(arr[i], arr[i + 1]);
		}
		else
		{
			if (arr[i] < arr[i + 1])
				swap(arr[i], arr[i + 1]);
		}
		ans = !ans;
	}
	cout << "\n\n\n The New Array elements are After Zig Zag: \n";
	for (int i = 0; i < size; i++)
	
		cout << arr[i] << ",";
	
}
// to separate even and odd numbers of an array of integers.
// Put all even numbers first, and then odd numbers..
void swapp(int *x, int *y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}
void seperateEvenOdd(int arr1[], int size1)
{
	int start = 0;
	int end = size1 - 1;
	while (start < end)
	{
		while (arr1[start] % 2 == 0 && start < end)
			start++;
		while (arr1[end] % 2 == 1 && start < end)
			end--;
		if (start < end)
		{
			swapp(&arr1[start], &arr1[end]);
			start++;
			end--;
		}
	}
	cout << "\n\n The New Array Even Odd Is : \n";
	for (int i = 0; i < size1; i++)
	{
		cout << arr1[i] << ",";
	}
}
int main()
{
	int arr[]= { 4, 5, 9, 12, 9, 22, 45,7 };
	int size = sizeof(arr) / sizeof(arr[0]);
	cout << "\nSize Of array is : " << size;
	cout << "\n Original Array : ";
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << ",";
	}

	//mostOccElement(arr, size);
	//arrayWaveForm(arr, size);
	int arr1[] = { 0, 1, 3, 4, 5, 6, 7, 8, 10 };
	int size1 = sizeof(arr1) / sizeof(arr1[0]);
	cout << "\nSize Of array 1 is : " << size;
	cout << "\n Original Array 1 : ";
	for (int i = 0; i < size1; i++)
	{
		cout << arr1[i] << ",";
	}
	int result= smallestMissingElement(arr1, 0, size1 - 1);
	//cout << "\n Smallest Mising Element is : " << result;
	//replaceElements(arr1, size1);
	//zigZag(arr, size);
	seperateEvenOdd(arr1, size1);
	return 0;
}
